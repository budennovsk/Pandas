
import pandas as pd
import xlsxwriter
import numpy as np

file_name = 'optimize.xlsx'

data1 = pd.DataFrame({'col1': [1, 2, 3],
                      'col': [4, 5, 6]})
data_col_name = data1.columns
data2 = pd.DataFrame({'col1': [111, 21, 31],
                      'col': [34, 53, 62]})
data_col_name_1 = data2.columns

data3 = pd.DataFrame({'col1': [1555, 5552, 55553],
                      'col': [4555, 5, 6]})
data4 = ['fff', 333, 444, 555, 6666, 777]

workbook = xlsxwriter.Workbook(filename=file_name)
worksheet = workbook.add_worksheet()

'''SELECT {[Measures].[YearNo], [Measures].[MonthNo]} ON COLUMNS,
NON EMPTY {[FactTable_b2].[YearNo].Members * [FactTable_b2].[MonthNo].Members} ON ROWS
FROM [YourCubeName]
ORDER BY [Выражение для сортировки] [ASC|DESC]
'''

start_row = 0  # Начальная строка для записи данных

col = 0

print('j')
# Запишите названия колонок
worksheet.write_row(start_row, col, data_col_name)
start_row += 1
number_format = workbook.add_format({'num_format': '#,##0.00'})
worksheet.set_column('A:Z', 15, number_format)
# Запись значений первого DataFrame
for row in range(len(data1)):
    for col in range(len(data1.columns)):
        worksheet.write(start_row + row, col, data1.iloc[row, col])

# Перемещение к следующей строке для записи значений следующего DataFrame
start_row += len(data1) + 2

worksheet.write_row(start_row, col - 1, data_col_name_1)
start_row += 1

# Запись значений второго DataFrame
for row in range(len(data2)):
    for col in range(len(data2.columns)):
        worksheet.write(start_row + row, col, data2.iloc[row, col])

# Перемещение к следующей строке для записи значений третьего DataFrame
start_row += len(data2) + 3

worksheet.write_row(start_row, col - 1, data_col_name_1)
start_row += 1

# Запись значений третьего DataFrame
for row in range(len(data3)):
    for col in range(len(data3.columns)):
        worksheet.write(start_row + row, col, data3.iloc[row, col])
start_row += len(data2) + 3

worksheet.write_row(start_row, col - 1, data4)
start_row += 1

original_array = np.array([2, 3, 4, 5]).tolist()

print(original_array)
# Элемент, который вы хотите вставить
element_to_insert = ['fff']
print(element_to_insert + original_array)

worksheet.write_row(start_row, col - 1, element_to_insert + original_array)
start_row += 1

# Закрытие файла Excel
workbook.close()

import numpy as np

# Создайте исходный массив NumPy
original_array = np.array([2, 3, 4, 5]).tolist()

print(original_array)
# Элемент, который вы хотите вставить
element_to_insert = ['fff']
print(element_to_insert + original_array)
#
# # Вставьте элемент в начало массива
# modified_array = np.insert(original_array, 0, element_to_insert)
#
# # modified_array теперь содержит [1, 2, 3, 4, 5]
# print(modified_array)

'''FILTER(
         EXCEPT([Dates].[Year].Members, {[Dates].[Year].[All]}) *
         EXCEPT([Dates].[Month_num].Members, {[Dates].[Month_num].[All]}),
         [Measures].[YearMonthValue] >= 202301 AND [Measures].[YearMonthValue] <= 202301)  * [SKU].[Analytic7].&[Сыр]'''

'''get_monthly_data 
    SELECT Articul3, Group_name, Format_TT, SUM(Sales_rub)/SUM(Sales_kg) AS Sales_kg
    FROM FactTable_b2
    WHERE YearNo = 2022 AND MonthNo = 11  
    GROUP BY  Articul3, Group_name, Format_TT
    
q3 [('HYPER', 'Конфеты', 'Хард-дискаунтер', 482.16233789278937), ('HYPER', 'Батончики', 'Гипермаркет', 784.5564981307331), ('HYPER', 'Пасты десертные', 'Супермаркет', 937.2648638091127), ('HYPER', 'Туррон', 'Интернет-магазин', 2973.773333333333), ('HYPER', 'Шоколадные шары, яйца', 'Алкомаркет', 5024.286328460876), ('HYPER', 'Освежающие конфеты', 'Дискаунтер', 1521.5248447204972), ('HYPER', 'Круассаны', 'Алкомаркет', 470.47401574803143), ('HYPER', 'Зефир', 'Супермаркет', 567.2030601721951), ('HYPER', 'Кекс', 'Интернет-магазин', 567.2198972844081), ('HYPER', 'Маффин', 'Гипермаркет', 318.5503070103023), ('HYPER', 'Торт вафельный', 'Алкомаркет', 1038.4565217391305), ('HYPER', 'Пасты десертные', 'Хард-дискаунтер', 995.7968641818608), ('HYPER', 'Прочие кондитерские изделия', 'Дискаунтер', 350.65630397971063), ('HYPER', 'Наборы и подарки', 'Дискаунтер', 1280.5546716361005), ('HYPER', 'Прочие МКИ', 'Алкомаркет', 436.1811417147932), ('HYPER', 'Шоколадные изделия', 'Хард-дискаунтер', 664.8338107543144), ('HYPER', 'Маффин', 'Дискаунтер', 258.183619661513), ('HYPER', 'Вафли', 'Дискаунтер', 359.42679835248134), ('HYPER', 'Торт вафельный', 'Супермаркет', 661.3729080586083), ('HYPER', 'Торт вафельный', 'Интернет-магазин', 683.2436787321213), ('HYPER', 'Драже', 'Гипермаркет', 1534.2513478427845), ('HYPER', 'Кекс', 'Дискаунтер', 335.2214448289912), ('HYPER', 'Пасты десертные', 'Интернет-магазин', 994.0180184619428), ('HYPER', 'Карамель', 'Хард-дискаунтер', 298.78669656308676), ('HYPER', 'Прочие МКИ', 'Интернет-магазин', 398.2110824741092), ('HYPER', 'Вафли', 'Супермаркет', 573.300476115333), ('HYPER', 'Прочие МКИ', 'Гипермаркет', 342.98903579927), ('HYPER', 'Бисквиты и пирожные', 'Дискаунтер', 559.8366950541038), ('HYPER', 'Карамель', 'Дискаунтер', 420.723887776648), ('HYPER', 'Шоколадные изделия', 'Дискаунтер', 798.6896232050011), ('HYPER', 'Маффин', 'Хард-дискаунтер', 212.4313047360295), ('HYPER', 'Бисквиты и пирожные', 'Алкомаркет', 337.77935323383093), ('HYPER', 'Прочие МКИ', 'Супермаркет', 398.12320569543596), ('HYPER', 'Прочие МКИ', 'Дискаунтер', 283.04048377490284), ('HYPER', 'Прочие кондитерские изделия', 'Гипермаркет', 455.6129329878958), ('HYPER', 'Бисквиты и пирожные', 'Супермаркет', 674.6765804691463), ('HYPER', 'Круассаны', 'Хард-дискаунтер', 363.37038633253974), ('HYPER', 'Кекс', 'Алкомаркет', 354.87407407407403), ('HYPER', 'Печенье', 'Интернет-магазин', 459.7388084385457), ('HYPER', 'Тарталетки', 'Супермаркет', 161.3700047807518), ('HYPER', 'Батончики', 'Алкомаркет', 786.647346375696), ('HYPER', 'Печенье', 'Хард-дискаунтер', 238.45433142851806), ('HYPER', 'Тарталетки', 'Дискаунтер', 117.34910431839317), ('HYPER', 'Вафли', 'Алкомаркет', 415.32378035440814), ('HYPER', 'Бисквиты и пирожные', 'Хард-дискаунтер', 486.4339444709405), ('HYPER', 'Мармелад', 'Алкомаркет', 767.1108796863515), ('HYPER', 'Торт вафельный', 'Гипермаркет', 619.0547207258293), ('HYPER', 'Прочие кондитерские изделия', 'Хард-дискаунтер', 225.58412009547115), ('HYPER', 'Драже', 'Дискаунтер', 1483.01775451857), ('HYPER', 'Шоколадные изделия', 'Интернет-магазин', 1096.5214519695032), ('HYPER', 'Батончики', 'Дискаунтер', 701.1687027643607), ('HYPER', 'Зефир', 'Дискаунтер', 475.8147020443671), ('HYPER', 'Кекс', 'Гипермаркет', 576.6167035748181), ('HYPER', 'Десерт', 'Гипермаркет', 496.3061350323706), ('HYPER', 'Тарталетки', 'Гипермаркет', 92.26784360189573), ('HYPER', 'Шоколадные шары, яйца', 'Хард-дискаунтер', 3517.849052639339), ('HYPER', 'Вафли', 'Интернет-магазин', 495.05540910543186), ('HYPER', 'Прочие кондитерские изделия', 'Интернет-магазин', 655.4792570934122), ('HYPER', 'Вафли', 'Хард-дискаунтер', 258.85527540688827), ('HYPER', 'Наборы и подарки', 'Алкомаркет', 1544.3921271763818), ('HYPER', 'Мармелад', 'Интернет-магазин', 590.5369538972594), ('HYPER', 'Пасты десертные', 'Гипермаркет', 1016.4429207279161), ('HYPER', 'Прочие кондитерские изделия', 'Супермаркет', 577.6057905819686), ('HYPER', 'Конфеты', 'Дискаунтер', 418.9102758419314), ('HYPER', 'Конфеты', 'Супермаркет', 755.7344304851704), ('HYPER', 'Драже', 'Интернет-магазин', 1299.0295592500054), ('HYPER', 'Шоколадные изделия', 'Супермаркет', 1135.1004421374116), ('HYPER', 'Круассаны', 'Дискаунтер', 411.9875692656629), ('HYPER', 'Шоколадные шары, яйца', 'Дискаунтер', 4230.79677563044), ('HYPER', 'Маффин', 'Супермаркет', 296.03448475414007), ('HYPER', 'Освежающие конфеты', 'Гипермаркет', 1570.388081753263), ('HYPER', 'Торт вафельный', 'Хард-дискаунтер', 371.63391171966856), ('HYPER', 'Драже', 'Хард-дискаунтер', 868.6413560972925), ('HYPER', 'Торт вафельный', 'Дискаунтер', 520.9404725842109), ('HYPER', 'Десерт', 'Супермаркет', 552.3494717821436), ('HYPER', 'Наборы и подарки', 'Хард-дискаунтер', 971.9583850795077), ('HYPER', 'Драже', 'Алкомаркет', 1660.4812433589102), ('HYPER', 'Десерт', 'Дискаунтер', 452.2144622705568), ('HYPER', 'Мармелад', 'Гипермаркет', 644.7207875962355), ('HYPER', 'Пасты десертные', 'Дискаунтер', 525.2695704569459), ('HYPER', 'Маффин', 'Интернет-магазин', 293.59819377942034), ('HYPER', 'Карамель', 'Супермаркет', 705.6371560098169), ('HYPER', 'Печенье', 'Супермаркет', 450.88689228888285), ('HYPER', 'Мармелад', 'Супермаркет', 701.7977110732585), ('HYPER', 'Печенье', 'Гипермаркет', 385.3110223774329), ('HYPER', 'Конфеты', 'Алкомаркет', 1721.0463271308784), ('HYPER', 'Десерт', 'Интернет-магазин', 648.5459941969317), ('HYPER', 'Круассаны', 'Гипермаркет', 447.5111553902177), ('HYPER', 'Круассаны', 'Интернет-магазин', 528.3947426124419), ('HYPER', 'Тарталетки', 'Интернет-магазин', 126.17727609088885), ('HYPER', 'Прочие кондитерские изделия', 'Алкомаркет', 1115.4737678855327), ('HYPER', 'Карамель', 'Алкомаркет', 743.9010931960781), ('HYPER', 'Печенье', 'Алкомаркет', 377.9322148860179), ('HYPER', 'Шоколадные шары, яйца', 'Супермаркет', 5173.844053722579), ('HYPER', 'Печенье', 'Дискаунтер', 311.2224431484449), ('HYPER', 'Бисквиты и пирожные', 'Интернет-магазин', 702.8093077192333), ('HYPER', 'Бисквиты и пирожные', 'Гипермаркет', 520.148956858348), ('HYPER', 'Карамель', 'Интернет-магазин', 537.101826224212), ('HYPER', 'Карамель', 'Гипермаркет', 652.4508896736949), ('HYPER', 'Круассаны', 'Супермаркет', 516.2825415549847), ('HYPER', 'Вафли', 'Гипермаркет', 434.6870136688352), ('HYPER', 'Наборы и подарки', 'Интернет-магазин', 1466.6687382086327), ('HYPER', 'Шоколадные изделия', 'Гипермаркет', 1118.2743850457907), ('HYPER', 'Батончики', 'Интернет-магазин', 875.6937117191585), ('HYPER', 'Освежающие конфеты', 'Супермаркет', 1562.0980032443274), ('HYPER', 'Освежающие конфеты', 'Интернет-магазин', 2949.763020833333), ('HYPER', 'Кекс', 'Супермаркет', 588.7774032202246), ('HYPER', 'Батончики', 'Хард-дискаунтер', 603.5923569667772), ('HYPER', 'Мармелад', 'Хард-дискаунтер', 296.8925072093695), ('HYPER', 'Зефир', 'Интернет-магазин', 935.9504132231405), ('HYPER', 'Батончики', 'Супермаркет', 860.2304268490822), ('HYPER', 'Конфеты', 'Интернет-магазин', 677.8545372155049), ('HYPER', 'Конфеты', 'Гипермаркет', 605.0846616879655), ('HYPER', 'Мармелад', 'Дискаунтер', 593.0463244400713), ('HYPER', 'Наборы и подарки', 'Супермаркет', 1632.5773272807298), ('HYPER', 'Драже', 'Супермаркет', 1452.7402569405153), ('HYPER', 'Наборы и подарки', 'Гипермаркет', 1534.5452160166112), ('HYPER', 'Прочие МКИ', 'Хард-дискаунтер', 230.90648573882692), ('HYPER', 'Шоколадные шары, яйца', 'Интернет-магазин', 4809.505273573188), ('HYPER', 'Шоколадные шары, яйца', 'Гипермаркет', 4465.594003205545), ('HYPER', 'Шоколадные изделия', 'Алкомаркет', 1015.3998187877205)]
'''

number = 486834448
formatted_number = '{:,}'.format(number)
print(formatted_number)
print('dd')

kol = [2, 4, 6, 1]
for i in kol:
    if i == 2:
        print('2')
        fov = 333
    else:
        print('else')
        print(fov)
        fov
    print(fov - 111)
    print(fov - 100)
#     match i:
#         case 2:
#             print('2')
#             fov = 333
#         case 4:
#             print('4')
#             v = fov+1
#             print(v)
#         case 6:
#             print('6')
#         case 1:
#             print('1')
#     print(fov+10)
#     fov
# print(fov-100)

# import pandas as pd
#
# # Создание датафрейма
# df = pd.DataFrame([1, 5, 3, 2, 4],
#                   ['у', 'b', 'c', 'd', 'e'])
#
# # Сортировка по убыванию
# sorted_df = df.sort_index(by=[0], ascending=False)
# print(sorted_df)

print('___________')
month = [12]
range_month = list(range(min(month), max(month) + 1))
print(range_month)
expression = '* {'

for num in range_month:
    expression += f'''[Dates].[Month_num].&[{num}], '''
expression += '}'
print(expression)
filter_month = expression.replace(", }", "}")
# filter_month = expression[:expression.rfind(',', 0, expression.rfind(','))] + expression[expression.rfind(',', 0,
#                                                                                                         expression.rfind(
#                                                                                                             ',')) + 1:]
print(filter_month)

e = 123
e = [e]
print(e)
data_1 = pd.DataFrame(data=[1, 2, 3, 4, 5], columns=['col_1'])
data_2 = pd.DataFrame(data=[3, 4, 5, 6], columns=['col_2'])

for u, k in enumerate([data_1, data_2]):
    print(u, '___', k)

from sklearn.metrics import mean_squared_error

y_true = [1, 2, 3]
y_pred = [2, 3, 4]

# Рассчитываем среднеквадратичную ошибку без возведения в квадрат


name, num = ['MSE', 0.4550495848227726]
print(name, round(num, 2))

go = []
print(go)

if not go:
    print('dox')


def fox():
    ma = []
    res = [22, 3553, 444, 55]
    first = 0.0000001
    for g in res:

        if g > first:
            first = g







        cox(g)
    cox(first)
def cox(go):

    print(go)


if __name__ == '__main__':
    print('_____________')
    fox()
    print('_____________')